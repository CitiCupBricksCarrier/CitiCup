package com.citicup.dao;

import com.citicup.model.Article;
import com.citicup.model.ArticleKey;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface ArticleMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @Delete({
        "delete from article",
        "where id = #{id,jdbcType=VARCHAR}",
          "and graphId = #{graphid,jdbcType=VARCHAR}",
          "and author = #{author,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(ArticleKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @Insert({
        "insert into article (id, graphId, ",
        "author, time, title, ",
        "watchNum, text)",
        "values (#{id,jdbcType=VARCHAR}, #{graphid,jdbcType=VARCHAR}, ",
        "#{author,jdbcType=VARCHAR}, #{time,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, ",
        "#{watchnum,jdbcType=VARCHAR}, #{text,jdbcType=LONGVARCHAR})"
    })
    int insert(Article record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @InsertProvider(type=ArticleSqlProvider.class, method="insertSelective")
    int insertSelective(Article record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, graphId, author, time, title, watchNum, text",
        "from article",
        "where id = #{id,jdbcType=VARCHAR}",
          "and graphId = #{graphid,jdbcType=VARCHAR}",
          "and author = #{author,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="graphId", property="graphid", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="author", property="author", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="time", property="time", jdbcType=JdbcType.VARCHAR),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="watchNum", property="watchnum", jdbcType=JdbcType.VARCHAR),
        @Result(column="text", property="text", jdbcType=JdbcType.LONGVARCHAR)
    })
    Article selectByPrimaryKey(ArticleKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @UpdateProvider(type=ArticleSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Article record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @Update({
        "update article",
        "set time = #{time,jdbcType=VARCHAR},",
          "title = #{title,jdbcType=VARCHAR},",
          "watchNum = #{watchnum,jdbcType=VARCHAR},",
          "text = #{text,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=VARCHAR}",
          "and graphId = #{graphid,jdbcType=VARCHAR}",
          "and author = #{author,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKeyWithBLOBs(Article record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table article
     *
     * @mbggenerated
     */
    @Update({
        "update article",
        "set time = #{time,jdbcType=VARCHAR},",
          "title = #{title,jdbcType=VARCHAR},",
          "watchNum = #{watchnum,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=VARCHAR}",
          "and graphId = #{graphid,jdbcType=VARCHAR}",
          "and author = #{author,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Article record);

    @Select({"select * from graph where author = #{author,jdbcType=VARCHAR}"})
    List<Article> selectByAuthor(String author);

    @Select({"select * from graph"})
    List<Article> selectAll();
}